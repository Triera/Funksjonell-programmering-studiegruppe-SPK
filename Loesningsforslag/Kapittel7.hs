module Kapittel7 where

import Data.Char

-- ======================== ⭐ Exercise 1 ⭐ ========================

-- -------------------------------------------------------------------
listComprehension :: (a -> a) -> (a -> Bool) -> [a] -> [a]
listComprehension f p xs = map f (filter p xs)
-- -------------------------------------------------------------------

-- -------------------------------------------------------------------
listComprehension' :: (a -> a) -> (a -> Bool) -> [a] -> [a]
listComprehension' f p = map f . filter p
-- -------------------------------------------------------------------

-- ======================= ⭐ Exercise 2a ⭐ ========================

-- -------------------------------------------------------------------
all' :: (a -> Bool) -> [a] -> Bool
all' p = and . map p
-- -------------------------------------------------------------------

-- -------------------------------------------------------------------
all'' :: (a -> Bool) -> [a] -> Bool
all'' p xs = and (map p xs)
-- -------------------------------------------------------------------

-- -------------------------------------------------------------------
all''' :: (a -> Bool) -> [a] -> Bool
all''' p = (\xs -> and (map p xs))
-- -------------------------------------------------------------------

-- -------------------------------------------------------------------
all'''' :: (a -> Bool) -> [a] -> Bool
all'''' p = \xs -> foldr (&&) True (map p xs)
-- -------------------------------------------------------------------

-- -------------------------------------------------------------------
all''''' :: (a -> Bool) -> [a] -> Bool
all''''' p = foldr (&&) True . map p
-- -------------------------------------------------------------------

-- -------------------------------------------------------------------
all'''''' :: (a -> Bool) -> [a] -> Bool
all'''''' p xs = foldr (&&) True (map p xs)
-- -------------------------------------------------------------------

-- ======================= ⭐ Exercise 2b ⭐ ========================

-- -------------------------------------------------------------------
any' :: (a -> Bool) -> [a] -> Bool
any' p = or . map p
-- -------------------------------------------------------------------

-- -------------------------------------------------------------------
any'' :: (a -> Bool) -> [a] -> Bool
any'' p = (\xs -> or (map p xs))
-- -------------------------------------------------------------------

-- -------------------------------------------------------------------
any''' :: (a -> Bool) -> [a] -> Bool
any''' p = foldr (||) True . map p
-- -------------------------------------------------------------------

-- -------------------------------------------------------------------
any'''' :: (a -> Bool) -> [a] -> Bool
any'''' p = \xs -> foldr (||) True (map p xs)
-- -------------------------------------------------------------------

-- ======================= ⭐ Exercise 2c ⭐ ========================

-- -------------------------------------------------------------------
takeWhile' :: (a -> Bool) -> [a] -> [a]
takeWhile' _ []     = []
takeWhile' p (x:xs)
    | p x       = x : takeWhile' p xs
    | otherwise = []
-- -------------------------------------------------------------------

-- ======================= ⭐ Exercise 2d ⭐ ========================

-- -------------------------------------------------------------------
dropWhile' :: (a -> Bool) -> [a] -> [a]
dropWhile' _ []     = []
dropWhile' p (x:xs)
    | p x       = dropWhile' p xs
    | otherwise = xs
-- -------------------------------------------------------------------

-- ======================== ⭐ Exercise 3a ⭐ =======================

-- -------------------------------------------------------------------
map' :: (a -> b) -> [a] -> [b]
map' f = foldr (\x -> (:) (f x)) []
-- -------------------------------------------------------------------

-- -------------------------------------------------------------------
map'' :: (a -> b) -> [a] -> [b]
map'' f = foldr ((:) . f) []
-- -------------------------------------------------------------------

-- -------------------------------------------------------------------
map''' :: (a -> b) -> [a] -> [b]
map''' f xs = foldr (\x -> (:) (f x)) [] xs
-- -------------------------------------------------------------------

-- -------------------------------------------------------------------
map'''' :: (a -> b) -> [a] -> [b]
map'''' f = foldr (\x xs -> (f x):xs) []
-- -------------------------------------------------------------------

-- ======================== ⭐ Exercise 3b ⭐ =======================
-- -------------------------------------------------------------------
filter' :: (a -> Bool) -> [a] -> [a]
filter' p = foldr (\x xs -> if p x then x:xs else xs) []
-- -------------------------------------------------------------------

-- ======================== ⭐ Exercise 4 ⭐ ========================

-- -------------------------------------------------------------------
dec2int' :: [Int] -> Int
dec2int' = foldl (\x y -> 10*x + y) 0
-- -------------------------------------------------------------------

-- -------------------------------------------------------------------
dec2int'' :: [Int] -> Int
dec2int'' xs = read (foldl (\x -> (++) x) "" (map show xs))
-- -------------------------------------------------------------------

-- -------------------------------------------------------------------
dec2int''' :: [Int] -> Int
dec2int''' xs = read (foldl (++) "" (map show xs))
-- -------------------------------------------------------------------

-- -------------------------------------------------------------------
dec2int'''' :: [Int] -> Int
dec2int'''' xs = read (foldl (++) "" (map show xs))
-- -------------------------------------------------------------------

-- -------------------------------------------------------------------
dec2int''''' :: [Int] -> Int
dec2int''''' = foldl (\x y -> 10*x + y) 0
-- -------------------------------------------------------------------

-- ======================== ⭐ Exercise 5 ⭐ ========================

-- -------------------------------------------------------------------
curry :: ((a, b) -> c) -> a -> b -> c
curry f = \x y -> f (x, y)
-- -------------------------------------------------------------------

-- -------------------------------------------------------------------
uncurry :: (a -> b -> c) -> (a, b) -> c
uncurry f = \(x, y) -> f x y
-- -------------------------------------------------------------------

-- ======================== ⭐ Exercise 6 ⭐ ========================

-- Unfold fra boken
-- -------------------------------------------------------------------
type Bit = Int

unfold :: (a -> Bool) -> (a -> b) -> (a -> a) -> a -> [b]
unfold p h t x
    | p x       = []
    | otherwise = h x : unfold p h t (t x)
-- -------------------------------------------------------------------
-- `chop8` som definert i boken fra før
chop8 :: [Bit] -> [[Bit]]
chop8 []   = []
chop8 bits = take 8 bits : chop8 (drop 8 bits)

-- ved bruk av unfold
chop8' :: [Bit] -> [[Bit]]
chop8' = unfold (== []) (take 8) (drop 8)
-- -------------------------------------------------------------------

-- -------------------------------------------------------------------
map1 f = unfold (== []) (f . head) tail
-- -------------------------------------------------------------------

-- -------------------------------------------------------------------
iterate' f = unfold (const False) id f
-- -------------------------------------------------------------------

-- ======================== ⭐ Exercise 7 ⭐ ========================

-- Slik funksjonene er definert i boken fra før
-- -------------------------------------------------------------------
int2bin :: Int -> [Bit]
int2bin 0 = []
int2bin n = n `mod` 2 : int2bin (n `div` 2)

make8 :: [Bit] -> [Bit]
make8 bits = take 8 (bits ++ repeat 0)

bin2int :: [Bit] -> Int
bin2int = foldr (\x y -> x + 2*y) 0

-- Encode fra boken uten parity
-- encode :: String -> [Bit]
-- encode = concat . map (make8 . int2bin . ord)

-- Decode fra boken uten parity
-- decode :: [Bit] -> String
-- decode = map (chr . bin2int) . chop8
-- -------------------------------------------------------------------

-- Definert med en parity bit
-- -------------------------------------------------------------------
-- Returnerer parity for en liste med bits
parity :: [Bit] -> Bit
parity bits
    | even' bits = 0
    | otherwise = 1
    where even' bits' = length bits' `mod` 2 == 0 

-- Samme som `chop8` fra boken, men håndterer 9 bits
chop9 :: [Bit] -> [[Bit]]
chop9 [] = []
chop9 bits = take 9 bits : chop9 (drop 9 bits)

make9 :: [Bit] -> [Bit]
make9 bits = (parity bits) : (make8 bits)

-- Error hvis oppgitt parity og beregnet parity ikke er like
checkParity :: [Bit] -> [Bit]
checkParity (bit:bits)
    | bit == parity bits = bits
    | otherwise          = error "Incorrect parity"

-- Samme som i boken, men `make9` legger til parity
encode :: String -> [Bit]
encode = concat . map (make9 . int2bin . ord)

-- Samme som i boken, men vi må sjekke at parity stemmer og bruke
-- `chop9` siden vi nå opererer med 9 bits
decode :: [Bit] -> String
decode = map (chr . bin2int . checkParity) . chop9