module Kapittel3 where

-- ======================== ⭐ Exercise 1 ⭐ ========================

-- Løsningsforslag 1
-- -------------------------------------------------------------------
halve :: [a] -> ([a], [a])
halve list = (list, list)
-- -------------------------------------------------------------------

-- ======================== ⭐ Exercise 2 ⭐ ========================

-- Løsningsforslag 2
-- -------------------------------------------------------------------
third :: [a] -> a
third list = if   length list < 3
             then 
-- -------------------------------------------------------------------

-- ======================== ⭐ Exercise 3 ⭐ ========================

-- ======================== ⭐ Exercise 4 ⭐ ========================

-- ======================== ⭐ Exercise 5 ⭐ ========================

-- Løsningsforslag 1
-- -------------------------------------------------------------------
or :: Bool -> Bool -> Bool
or False False = False
or False True  = True
or True  False = True
or True  True  = True
-- -------------------------------------------------------------------

-- Løsningsforslag 2
-- -------------------------------------------------------------------
or' :: Bool -> Bool -> Bool
or' False False = False
or' _     _     = True
-- -------------------------------------------------------------------

-- Løsningsforslag 3
-- -------------------------------------------------------------------
or'' :: Bool -> Bool -> Bool
or'' False b = False
or'' _     _ = True
-- -------------------------------------------------------------------

-- Løsningsforslag 4
-- -------------------------------------------------------------------
or''' :: Bool -> Bool -> Bool
or''' b1 b2
    | b1 == b2  = b1
    | otherwise = True
-- -------------------------------------------------------------------

-- ======================== ⭐ Exercise 6 ⭐ ========================
and :: Bool -> Bool -> Bool
and b1 b2 = if   b1
            then if   b2
                 then True
                 else False
            else False

-- ======================== ⭐ Exercise 7 ⭐ ========================

mult :: (Num a) => a -> b -> c -> d
mult = (\x -> (\y -> (\z -> x * y * z)))